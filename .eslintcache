[{"/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/reportWebVitals.js":"1","/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/App.js":"2","/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/page/auth/login.js":"3","/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/index.js":"4","/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/page/auth/register.js":"5","/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/page/mainPage.js":"6"},{"size":362,"mtime":1612862974749,"results":"7","hashOfConfig":"8"},{"size":615,"mtime":1613638938591,"results":"9","hashOfConfig":"8"},{"size":3702,"mtime":1613650258716,"results":"10","hashOfConfig":"8"},{"size":543,"mtime":1612961442169,"results":"11","hashOfConfig":"8"},{"size":7629,"mtime":1613638791147,"results":"12","hashOfConfig":"8"},{"size":3082,"mtime":1614747677561,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ax3la6",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/reportWebVitals.js",[],"/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/App.js",["28","29"],"import React, { Component } from \"react\";\nimport { Route, Router} from 'react-router-dom'\n\nimport LoginBox from \"./page/auth/login\";\nimport RegisterBox from \"./page/auth/register\";\nimport MainPage from \"./page/mainPage\";\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      \n      };\n    }\n\n    render(){\n      return (\n        <>\n        <Route component={LoginBox} path=\"/auth/login\" />\n        <Route component={RegisterBox} path=\"/auth/register\" />\n        <Route component={MainPage} path=\"/page/mainPage\"/>\n        </>\n      );\n    }\n  }\n  export default App;\n\n","/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/page/auth/login.js",["30","31"],"/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/index.js",[],"/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/page/auth/register.js",["32"],"import React from \"react\";\nimport \"../css/login.css\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\n\nclass RegisterBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"\",\n      userPassword: \"\",\n      userEmail: \"\",\n      investType: \"\",\n      duplicateEmail: false,\n      pwCheck: \"\",\n      flag: true,\n    };\n  }\n\n  submitRegister = async (dataTosubmit) => {\n    var res;\n    await axios\n      .post(\"http://localhost:4000/auth/register\", dataTosubmit, {\n        withCredentials: true,\n      })\n      .then((response) => (res = response.data.success));\n    if (res) {\n      {\n        <Link to=\"/auth/login\" className=\"controller\"></Link>;\n      }\n      alert(\"회원가입에 성공하였습니다. 로그인 화면에서 로그인 해주세요.\");\n    } else {\n      this.setState({\n        duplicateEmail: true,\n      });\n    }\n  };\n\n  handleBody = () => {\n    let body = {\n      userName: this.state.userName,\n      userPassword: this.state.userPassword,\n      userEmail: this.state.userEmail,\n      investType: this.state.investType,\n    };\n    return body;\n  };\n\n  onSubmitHandler = (event) => {\n    event.preventDefault();\n    this.submitRegister(this.handleBody());\n  };\n\n  handleChangeName = async (e) => {\n    e.preventDefault();\n    await this.setState({\n      userName: e.target.value,\n    });\n    await this.handleFlag();\n  };\n\n  handleChangePassword = async (e) => {\n    e.preventDefault();\n    await this.setState({\n      userPassword: e.target.value,\n    });\n    await this.handleFlag();\n  };\n\n  handleChangeChackPassword = async (e) => {\n    e.preventDefault();\n    await this.setState({\n      pwCheck: e.target.value,\n    });\n    await this.handleFlag();\n  };\n\n  handleChangeInvestType = async (e) => {\n    e.preventDefault();\n    await this.setState({\n      investType: e.target.value,\n    });\n    await this.handleFlag();\n  };\n  handleChangeEmail = async (e) => {\n    e.preventDefault();\n    await this.setState({\n      userEmail: e.target.value,\n    });\n    await this.handleFlag();\n  };\n\n  confirmPW() {\n    //비밀번호 유효성검사(영문,숫자 혼합 6~20)\n    if (this.state.userPassword !== \"\" && this.state.pwCheck !== \"\") {\n      if (this.state.userPassword === this.state.pwCheck) {\n        //const confirm = \"일치\"\n        return false;\n        /*this.setState({\n              pwCheck: this.state.pwCheck\n            });*/\n      } else {\n        //const unconfirm = \"불일치\"\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  checkPW() {\n    if (this.state.userPassword !== \"\" && this.state.pwCheck !== \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkID() {\n    if (this.state.userName !== \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkEmail() {\n    if (this.state.userEmail !== \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  checkInvestType() {\n    if (this.state.investType !== \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  handleFlag() {\n    if (\n      !this.confirmPW() &&\n      this.checkEmail() &&\n      this.checkID() &&\n      this.checkInvestType()\n    ) {\n      this.setState({\n        flag: false,\n      });\n    } else {\n      this.setState({\n        flag: true,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmitHandler} className=\"rootContainer\">\n        <div className=\"rootContainer\">\n          <div className=\"boxContainer\">\n            <div className=\"innerContainer\">\n              <div className=\"header\">회원가입</div>\n              <div className=\"box\">\n                <div className=\"innerGroup\">\n                  <label html=\"userID\">닉네임</label>\n                  <input\n                    type=\"text\"\n                    name=\"userID\"\n                    value={this.state.userName}\n                    onChange={this.handleChangeName}\n                    className=\"loginInput\"\n                    placeholder=\"닉네임\"\n                  />\n                </div>\n                <div className=\"innerGroup\">\n                  <label html=\"userEmail\">이메일</label>\n                  <input\n                    type=\"email\"\n                    name=\"userEmail\"\n                    value={this.state.email}\n                    onChange={this.handleChangeEmail}\n                    className=\"loginInput\"\n                    placeholder=\"example@example.com\"\n                  />\n                </div>\n                {this.state.duplicateEmail && (\n                  <div\n                    id=\"confirmEmail\"\n                    style={{\n                      color: \"red\",\n                      fontSize: 13,\n                      marginLeft: \"3px\",\n                      marginBottom: \"4px\",\n                    }}\n                  >\n                    이미 가입된 이메일 입니다.\n                  </div>\n                )}\n                <div className=\"innerGroup\">\n                  <label html=\"userPW\">비밀번호</label>\n                  <input\n                    type=\"password\"\n                    name=\"userPW\"\n                    value={this.state.pw}\n                    onChange={this.handleChangePassword}\n                    className=\"loginInput\"\n                    placeholder=\"비밀번호 입력\"\n                  />\n                </div>\n                <div className=\"innerGroup\">\n                  <label html=\"checkPW\">비밀번호 확인</label>\n                  <input\n                    type=\"password\"\n                    name=\"checkPW\"\n                    value={this.state.pwCheck}\n                    onChange={this.handleChangeChackPassword}\n                    className=\"loginInput\"\n                    placeholder=\"비밀번호 입력\"\n                  />\n                </div>\n                {this.confirmPW() && (\n                  <div\n                    id=\"confirmPassword\"\n                    style={{ color: \"red\", fontSize: 13, marginLeft: \"3px\" }}\n                  >\n                    비밀번호가 일치하지 않습니다.\n                  </div>\n                )}\n\n                <div className=\"innerRadio\">\n                  <label html=\"investType\">투자성향:</label>\n                  <input\n                    type=\"radio\"\n                    name=\"investType\"\n                    className=\"investType\"\n                    onChange={this.handleChangeInvestType}\n                    value={1}\n                  />{\" \"}\n                  장기\n                  <input\n                    type=\"radio\"\n                    name=\"investType\"\n                    className=\"investType\"\n                    onChange={this.handleChangeInvestType}\n                    value={2}\n                  />{\" \"}\n                  스윙\n                  <input\n                    type=\"radio\"\n                    name=\"investType\"\n                    className=\"investType\"\n                    onChange={this.handleChangeInvestType}\n                    value={3}\n                  />{\" \"}\n                  단기\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"registerBtn\"\n                  disabled={this.state.flag}\n                >\n                  회원가입\n                </button>\n              </div>\n            </div>\n\n            <Link to=\"/auth/login\" className=\"controller\">\n              로그인\n            </Link>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default RegisterBox;\n","/Users/dlwnsgus07/Desktop/StockProject/Frontend/src/page/mainPage.js",["33","34","35","36","37","38","39","40"],{"ruleId":"41","severity":1,"message":"42","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":26},{"ruleId":"41","severity":1,"message":"45","line":2,"column":17,"nodeType":"43","messageId":"44","endLine":2,"endColumn":23},{"ruleId":"41","severity":1,"message":"46","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":16},{"ruleId":"41","severity":1,"message":"47","line":20,"column":11,"nodeType":"43","messageId":"44","endLine":20,"endColumn":18},{"ruleId":"48","severity":1,"message":"49","line":29,"column":7,"nodeType":"50","messageId":"51","endLine":31,"endColumn":8},{"ruleId":"41","severity":1,"message":"52","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":14},{"ruleId":"53","severity":1,"message":"54","line":24,"column":19,"nodeType":"55","endLine":24,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":25,"column":19,"nodeType":"55","endLine":25,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":26,"column":19,"nodeType":"55","endLine":26,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":27,"column":19,"nodeType":"55","endLine":27,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":28,"column":19,"nodeType":"55","endLine":28,"endColumn":22},{"ruleId":"56","severity":1,"message":"57","line":70,"column":23,"nodeType":"55","endLine":70,"endColumn":55},{"ruleId":"53","severity":1,"message":"58","line":70,"column":23,"nodeType":"55","endLine":70,"endColumn":55},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'ReactDom' is defined but never used.","'request' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]